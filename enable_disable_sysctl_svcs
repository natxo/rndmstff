#!/usr/bin/env perl 

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;

my (@lines);

Getopt::Long::Configure( "no_ignore_case", "bundling" );
GetOptions(
    't|target_dir=s' =>
      \( my $target_dir = "/etc/systemd/system/multi-user.target.wants/" ),
    'c|cust_file=s'        => \my $cust_file,
    'h|help|?'             => \my $help,
    's|service_template=s' => \my $svc_template,
);

pod2usage( -verbose => 2, -noperldoc => 1 ) if $help;
pod2usage() unless $cust_file and $svc_template;

chdir $target_dir;

opendir( my $dh, $target_dir );

my @target_svcs = grep { /^test.*/ && "$target_dir/$_" } readdir($dh);

# strip svc_template@  and .service part from symlink name, keep customer
my @customers_svcs = map { s/test\@(.*)\.service$/$1/g; $_ } @target_svcs;

open( my $fh, "<", $cust_file );

# read customer file, fill @lines array with customers
while ( my $cust = <$fh> ) {
    next if $cust =~ /^#.*/;
    chomp $cust;
    push @lines, $cust;
}

my ( @union, @intersection, @difference );

my %count = ();

foreach my $element ( @lines, @customers_svcs ) {
    $count{$element}++;
}

foreach my $element ( keys %count ) {
    push @union, $element;
    push @{ $count{$element} > 1 ? \@intersection : \@difference }, $element;
}

if ( scalar @difference > 0 ) {
    my @in_cust_svcs;
    my @in_cust_file;

    # get customers in customers file that are not in the services
    # enable those services
    for my $item (@difference) {
        if ( grep( /$item/, @customers_svcs ) ) {
            push @in_cust_svcs, $item;
        }
        if ( grep( /$item/, @lines ) ) {
            push @in_cust_file, $item;
        }
    }
    print "In svcs, not in customer file, removing service(s):\n";
    print "=" x 78 . "\n";
    for (@in_cust_svcs) {
        next unless $_ =~ /[[:alpha:]]/;
        print "\t[$_]\n";
        system("sudo systemctl stop test\@$_\.service");
        system("sudo systemctl disable test\@$_\.service");
    }

    print "In customer file, not svcs, adding service(s):\n";
    print "=" x 78 . "\n";
    for (@in_cust_file) {
        next unless $_ =~ /[[:alpha:]]/;
        print "\t[$_]\n";
        system( "sudo systemctl enable test\@$_\.service" );
        system("sudo systemctl start test\@$_\.service" );
    }
}
else {
    print
"customers and services are synchronized, move along, nothing to see here\n";
}

=head1 NAME

enable_disable_sysctl_svcs - create or remove systemctl service instances based on a file listing them

=head1 DESCRIPTION

If you need to create systemctl files that are similar but for a few arguments, then you can use template unit files.

This tool helps to create or remove systemctl services according the the list of names in a text file (one per line)

=head1 USAGE 

systemctl -c /path/to/config/file -s name_of_systemc_template 

=head1 LICENSE

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perldoc perlartistic.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut
