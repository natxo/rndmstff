#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;

# placeholder for lsblk output
my $HoA_ref;

# placeholder for systemdisk
my $systemdisk;

# placeholder for mountpoints info
my $mnt_pnt = "/grid";

# save results of lsblk -n -i in @lsblk
my @lsblk =
  `/bin/lsblk --noheadings --list --output NAME,TYPE,MOUNTPOINT,uuid,fstype`;

# file $HoA_ref;
_detect_blk_parts(@lsblk);

# get mounted/umounted devices
my ( $mounted, $umounted ) = _get_mounted();

# get disks/parts info
my ( $disks, $partitions ) = _get_dev_type();

# get block dev with mounted partition, this is the system drive probably
my @matched = _get_matching_dev( $mounted, $umounted );
my @systemdisk = uniq(@matched);

if ( scalar @systemdisk == 1 ) {
    for ( @systemdisk ) {
        $systemdisk = $_;
    }
}
else {
    print "mounted disks:\t";
    print "$_\n" for @systemdisk;
    print "we have filesystems mounted in different disks!\n";
    exit 1;
}

# generate partition/mount point hash
_gen_mntpnt_dict($disks);
# skip system disk / partitions from further processing
for my $part ( keys %$partitions ){
    next if $part =~ m/$systemdisk/;
    print "Systemdisk:\t$systemdisk\n";
    print $part, " \t" ;

    # does it have a filesystem? (
    if ( $HoA_ref->{$part}[2] eq "0" ) {
        print "$part has no uuid, so no filesystem\n" ;
    }
    else {
        print $HoA_ref->{$part}[2], "\n" ;
    }
}


# ===============
# subroutines, do not change anything from here unless
# you know what you are doing
# ===============
#
# fill $AoH_ref with the block device info:
# * list of devices (disk or partitions)
# inside every device, info about the block device:
# ** element 0: disk or part
# ** element 1: mount point (if not mounted -> 0)
# ** element 2: block dev uuid (if not present -> 0)
# ** element 3: file system type (if not present -> 0)
sub _detect_blk_parts {
    my (@lsblk) = @_;
    for my $blk (@lsblk) {
        chomp $blk;

        # skip fd0/sr0 (floppy disk/cdrom)
        next if $blk =~ m/^(fd|sr)0.*/;

        # match if disk detected, no partition
        if ( $blk =~ /^(\w+)\s+(\w+)\s+$/ ) {
            $HoA_ref->{$1} = [ $2, 0, 0, 0 ];
        }

        # match if partition is mounted
        elsif ( $blk =~
            /^(\w+)\s+(\w+)\s+(\/|\/\w+|\/\w+\/\w+|\[\w+\])\s+(\S+)\s+(\w+)/ )
        {
            $HoA_ref->{$1} = [ $2, $3, $4, $5 ];
        }

        # match if partition detected but not mounted
        elsif ( $blk =~ /^(\w+)\s+(\w+)\s+(\S+)\s+(\w+)/ ) {
            $HoA_ref->{$1} = [ $2, 0, $3, $4 ];
        }
    }
}

#print Dumper $HoA_ref;

#for my $dev ( keys %$HoA_ref ) {
#    print "$dev:\n";
#    print "\tType: " . $HoA_ref->{$dev}[0] . "\n";
#    print "\tMount point: " . $HoA_ref->{$dev}[1] . "\n";
#    print "\tUUID:" . $HoA_ref->{$dev}[2] . "\n";
#    print "\tfs type: " . $HoA_ref->{$dev}[3] . "\n";
#    print "=" x 72 . "\n";
#}

# get mounted/umounted partitions
# returns 2 array refs
sub _get_mounted {
    my ( @mounted, @umounted );
    for my $dev ( keys %$HoA_ref ) {

        # skip mounted devices
        if ( $HoA_ref->{$dev}[1] eq 0 ) {
            push @umounted, $dev;
        }
        else {
            push @mounted, $dev;
        }
    }
    return \@mounted, \@umounted;
}

# is the block device a disk or a partition?
# return 2 hash refs
sub _get_dev_type {
    my ( %disks, %partitions );
    for my $dev ( keys %$HoA_ref ) {

        # skip mounted devices
        if ( $HoA_ref->{$dev}[0] eq "disk" ) {
            $disks{$dev} = $HoA_ref->{$dev}[0];
        }
        elsif ( $HoA_ref->{$dev}[0] eq "part" ) {
            $partitions{$dev} = $HoA_ref->{$dev}[0];
        }
    }
    return \%disks, \%partitions;
}

# in the list of mounted devices we have disks and partitions, if a partition in ad
# disk is already mounted, skip the disk as well
# returns list met disk containing mounted partitions (in our use case, this script
# only runs *after* a pxe installation, in which case we have found the system disk :-)
sub _get_matching_dev {
    my ( $mounted, $umounted ) = @_;
    for my $umounted (@$umounted) {
        my @matches = grep /$umounted/, @$mounted;
        for my $match (@matches) {

            # strip the partition number from block device, keep just disk info
            $match =~ s/\d//g;
            push @matched, $match;
        }
    }
    return @matched;
}

# get unique members of array, this should be standard in perl ...
sub uniq {
    my %seen;
    return grep { !$seen{$_}++ } @_;
}

# create the mount point structure of all the non-system disks
# this is a tree under $mnt_pnt numbered starting at 0 counting up to
# the total number of non-system disks, so if there are 6 non-system
# disks, then from 0 to 5
#
# First we need to get the list of non-system disks, count how many
# there are, create a dictionary with disk/nr info (diska/0, diskb/1
# etc). After that we walk the $mnt_pnt tree and create the directories
# if needed
sub _gen_mntpnt_dict {
    my ( $disks ) = @_;
    my @disks = sort (keys %$disks) ;
    @disks = grep ! /$systemdisk/, @disks;
    my $nr_nonsysdisks = scalar @disks;
    
    my %dict;
    my $nr = 0;
    for my $disk ( @disks ) {
        next if $disk eq $systemdisk;
        $dict{$disk} = $nr;
        $nr++;
    }
    if ( -d $mnt_pnt ) {
        print "$mnt_pnt exists...\n";
    }
    else {
        mkdir $mnt_pnt, 0755;
    }
    for my $disk ( keys %dict ) {
        if ( -d "$mnt_pnt/$dict{$disk}" ) {
            print "$mnt_pnt/$dict{$disk} exists\n"; 
        }
        else {
            print "$mnt_pnt/$dict{$disk} does not exist, creating mount pooint ...\n";
            mkdir "$mnt_pnt/$dict{$disk}", 0755;
        }
    }
}

